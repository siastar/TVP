// SingleProd element contains the single product data, plus edit and remove buttons.
// it is generated by ShowProdList.js component by mapping the array of products received by GetAllProducts.js
// and returning a single element for any product in the arrays.

console.log('...opening')

import React, { Component } from 'react';
import axios from 'axios';
import Popup from "reactjs-popup";
//import { Link } from 'react-router-dom';
import DelProd from './DelProd.js';
import EditProd from './EditProd.js'

const deleteDataRoute = 'http://localhost:3000/products/deletedata/'; //server side address
const updateDataRoute = 'http://localhost:3000/products/updatedata/'; //server side address
// TODO: this links should not be hardcoded

class SingleProd extends Component {

  constructor(props) {
    super(props);

    //binding
    this.onEdit = this.onEdit.bind(this);
    this.onRemove = this.onRemove.bind(this);

    this.state = {
        compName: 'SingleProd.js',
        errorToHandle: false,
        product: []
    };
  };

  componentDidMount() {
    console.log(this.state.compName, ' mounted');
      //copy the single product data in the component state
      this.setState({
          product: this.props.product
      });
      console.log(this.state);
  };

  componentWillUnmount() {
    console.log(this.state.compName, ' unmounted');
  };

  onEdit(e) { //triggered by clicking EDIT button
    console.log('edit button clicked');
    console.log('product MongoDB _id: ', this.props.product._id);
    e.preventDefault();
    const itemToEdit = (updateDataRoute + this.props.product._id);
    console.log ('...editing: ' , itemToEdit);
  };


 onRemove() { //triggered by clicking REMOVE button
    console.log('remove button clicked');
    console.log('product MongoDB _id: ', this.props.product._id);

  // onRemove(e) { //triggered by clicking REMOVE button
  //   console.log('remove button clicked' , e);
  //   console.log('product MongoDB _id: ', this.props.product._id);
  //   e.preventDefault();

    const itemToDelete = (deleteDataRoute + this.props.product._id);
    //gives Express server the link of item to delete
    //something like http://localhost:3000/products/deletedata/5e28732b3931a2642f744d58
    //by combining deleteDataroute http://localhost:3000/products/deletedata/
    //with product Mongo DB :id 5e28732b3931a2642f744d58
    //refers to express delete method defined in  backend/routes/productsRoute.js
    //it expects deletedata/:id where :id is the MongoDB object _id
    console.log('...deleting: ', itemToDelete);

    //actual element deletion happens here via axios
    axios.delete(itemToDelete)
      .then(res => {
        console.log('product removed from DB')
      })
      .catch(err => {
        console.log('error, cannot remove data: ', err)
      });
    };
    // NOTE:
    // at this point the DB has been modified but 
    // the DB change will not be reflected on the visualization until the page is reloaded
    // in order to have an immediate visualization we operate both on the component state and the database. 
    // To update the state of the parent GetAllProds we need to send up to the parent the product id we
    // used to remove the same product from DB which is this.props.product._id
    // 
   
    sendProductIdToParent = () => {
        //this.props.removeProduct(this.props.product._id);
        this.props.removeProduct('test!!!!!');
        console.log('triggered');
  };

    testMethod1(){console.log('test 1 ok')};
    
    testMethod2(){console.log('test 2 ok')};

    
    //when Remove button is clicked 2 events are triggered
    //onRemove actually removes data from DB
    //sendProductId send the removed product ID to GetAllProducts so that the state can be updated
    //and the correct list displayed withou reloading the page
    //
    //to send data to parent I find convenient to use arrow function but once data has been reached
    //by parent I will not use arrows to update the state so the relative function removeProduct is bound
    //in the class constructor
  
  render() {
      console.log('SingleProd this:', this);
      const testValue = 'testValue';
    return (
      <div>
        <hr/>
        <hr/>
        <h6> rendered {this.state.compName} </h6>
        <h6> -------- </h6>
        
          <h6>id: {this.props.product._id}</h6>
          <h6>artist: {this.props.product.artist}</h6>
          <h6>title: {this.props.product.title}</h6>
          <h6>year: {this.props.product.year}</h6>

        {/* EDIT BUTTON*/}
        <EditProd
          product={this.props.product}
          buttonlabel='Edit'
        />
        
        {/* REMOVE BUTTON*/} 
        <button
         onClick={() => {
             this.onRemove(); //actually removes element from DB
             this.sendProductIdToParent(); //send removed item id to parent in order to update its state
         }}>
          Remove
        </button>
      </div>
    );
  };
};

export default SingleProd;


<button onClick={() => {
        this.helloThere();
        this.messageInConsole();
      }}>
        Click me!
      </button>
